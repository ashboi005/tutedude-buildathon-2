AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FastAPI Supabase Boilerplate - FastAPI application deployed on AWS Lambda

Parameters:
  SupabaseUrl:
    Type: String
    Description: "Supabase project URL"
    
  SupabaseAnonKey:
    Type: String
    Description: "Supabase anonymous key"
    NoEcho: true
    
  SupabaseServiceRoleKey:
    Type: String
    Description: "Supabase service role key"
    NoEcho: true
    
  DatabaseUrl:
    Type: String
    Description: "Database connection URL"
    NoEcho: true
    
  JwtSecretKey:
    Type: String
    Description: "JWT secret key for token signing"
    NoEcho: true
    
  SupabaseStorageBucket:
    Type: String
    Description: "Supabase storage bucket name"
    Default: "your-storage-bucket"

Resources:
  FastApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ["lambda_function.lambda_handler"]
      MemorySize: 2048
      Timeout: 30
      Environment:
        Variables:
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_ANON_KEY: !Ref SupabaseAnonKey
          SUPABASE_SERVICE_ROLE_KEY: !Ref SupabaseServiceRoleKey
          DATABASE_URL: !Ref DatabaseUrl
          JWT_SECRET_KEY: !Ref JwtSecretKey
          SUPABASE_STORAGE_BUCKET: !Ref SupabaseStorageBucket
          ENVIRONMENT: "prod"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: "/{proxy+}"
            Method: ANY
            RestApiId: !Ref ApiGateway
        RootApiEvent:
          Type: Api
          Properties:
            Path: "/"
            Method: ANY
            RestApiId: !Ref ApiGateway
    Metadata:
      DockerTag: python3.11-v1
      DockerContext: .
      Dockerfile: Dockerfile

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: "Prod"
      BinaryMediaTypes:
        - image/jpeg
        - image/png
        - image/webp
        - image/gif
        - application/octet-stream
        - multipart/form-data
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

Outputs:
  ApiGatewayUrl:
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
    Description: The URL of the API Gateway
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  ApiGatewayId:
    Value: !Ref ApiGateway
    Description: The ID of the API Gateway
    Export:
      Name: !Sub "${AWS::StackName}-ApiId"
