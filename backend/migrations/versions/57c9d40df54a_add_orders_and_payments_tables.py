"""Add orders and payments tables

Revision ID: 57c9d40df54a
Revises: 765416a4038c
Create Date: 2025-07-27 00:37:03.274354

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '57c9d40df54a'
down_revision: Union[str, None] = '765416a4038c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bulk_order_windows',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('creator_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('window_start_time', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('window_end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('total_participants', sa.Integer(), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['user_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('payment_method', sa.String(length=50), nullable=False),
    sa.Column('razorpay_order_id', sa.String(length=100), nullable=True),
    sa.Column('razorpay_payment_id', sa.String(length=100), nullable=True),
    sa.Column('razorpay_signature', sa.String(length=200), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('payment_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('orders',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('buyer_id', sa.UUID(), nullable=False),
    sa.Column('seller_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price_per_unit', sa.Float(), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=False),
    sa.Column('order_type', sa.String(length=50), nullable=False),
    sa.Column('payment_status', sa.String(length=50), nullable=False),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('bulk_order_window_id', sa.UUID(), nullable=True),
    sa.Column('order_status', sa.String(length=50), nullable=False),
    sa.Column('delivery_address', sa.Text(), nullable=True),
    sa.Column('estimated_delivery', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_delivery', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('quantity > 0', name='quantity_positive_check'),
    sa.CheckConstraint('total_amount > 0', name='total_amount_positive_check'),
    sa.ForeignKeyConstraint(['bulk_order_window_id'], ['bulk_order_windows.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['buyer_id'], ['user_profiles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['seller_id'], ['user_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('job_run_details', schema='cron')
    op.drop_table('job', schema='cron')
    op.add_column('supplier_profiles', sa.Column('balance', sa.Float(), nullable=False))
    op.add_column('vendor_profiles', sa.Column('balance', sa.Float(), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('vendor_profiles', 'balance')
    op.drop_column('supplier_profiles', 'balance')
    op.create_table('job',
    sa.Column('jobid', sa.BIGINT(), server_default=sa.text("nextval('cron.jobid_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('schedule', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('command', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('nodename', sa.TEXT(), server_default=sa.text("'localhost'::text"), autoincrement=False, nullable=False),
    sa.Column('nodeport', sa.INTEGER(), server_default=sa.text('inet_server_port()'), autoincrement=False, nullable=False),
    sa.Column('database', sa.TEXT(), server_default=sa.text('current_database()'), autoincrement=False, nullable=False),
    sa.Column('username', sa.TEXT(), server_default=sa.text('CURRENT_USER'), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('jobname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('jobid', name='job_pkey'),
    sa.UniqueConstraint('jobname', 'username', name='jobname_username_uniq'),
    schema='cron'
    )
    op.create_table('job_run_details',
    sa.Column('jobid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('runid', sa.BIGINT(), server_default=sa.text("nextval('cron.runid_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('job_pid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('database', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('command', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('return_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('runid', name='job_run_details_pkey'),
    schema='cron'
    )
    op.drop_table('orders')
    op.drop_table('payments')
    op.drop_table('bulk_order_windows')
    # ### end Alembic commands ###
